<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Loremaster's blog]]></title>
  <link href="http://bloginius.com/atom.xml" rel="self"/>
  <link href="http://bloginius.com/"/>
  <updated>2014-01-17T12:53:11+04:00</updated>
  <id>http://bloginius.com/</id>
  <author>
    <name><![CDATA[Serj L aka Loremaster]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How Install Thinking Sphinx With PostgreSQL's Support on Mac OS X]]></title>
    <link href="http://bloginius.com/blog/2014/01/10/how-install-thinking-sphinx-with-postgresqls-support-on-mac-os-x/"/>
    <updated>2014-01-10T13:05:00+04:00</updated>
    <id>http://bloginius.com/blog/2014/01/10/how-install-thinking-sphinx-with-postgresqls-support-on-mac-os-x</id>
    <content type="html"><![CDATA[<p>Thinking Sphinx is a library, which allows you use Sphinx &ndash; full text search server. But setup can be tricky, if you use PostgreSQL. In this post I will show you you how setup it.</p>

<p>First of all, make sure that you have installed Mysql. The best way to install it is just use homebrew:</p>

<figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install <span class="nv">mysql</span>
</span><span class='line'><span class="o">==</span>&gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/mysql-5.6.15.mavericks.bottle.tar.gz
</span><span class='line'><span class="c">######################################################################## 100.0%</span>
</span><span class='line'><span class="o">==</span>&gt; Pouring mysql-5.6.15.mavericks.bottle.tar.gz
</span><span class='line'><span class="o">==</span>&gt; Caveats
</span><span class='line'>A <span class="s2">&quot;/etc/my.cnf&quot;</span> from another install may interfere with a Homebrew-built
</span><span class='line'>server starting up correctly.
</span><span class='line'>
</span><span class='line'>To connect:
</span><span class='line'>    mysql -uroot
</span><span class='line'>
</span><span class='line'>To have launchd start mysql at login:
</span><span class='line'>    ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents
</span><span class='line'>Then to load mysql now:
</span><span class='line'>    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist
</span><span class='line'>Or, <span class="k">if </span>you don<span class="err">&#39;</span>t want/need launchctl, you can just run:
</span><span class='line'>    mysql.server start
</span></code></pre></td></tr></table></div></figure>


<p>I recommend you to copy and past commands from homebrew&rsquo;s output after installation.</p>

<p>If you don&rsquo;t want to use homebrew (but i strongly recommend to <strong>use</strong> homebrew), then you should install x64 MySQL server from <a href="http://dev.mysql.com/downloads/mysql/">official site</a>. Make sure to use x64, you don&rsquo;t want to get any weird errors (I guess that you use at least OS X 10.6).</p>

<p>Now you should install Sphinx. And it&rsquo;s a tricky part. If you would install it without any flag or with just mysql support, you would get such weird errors:</p>

<figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake ts:index
</span><span class='line'>Generating configuration to /Users/serj/Projects/gearup/config/development.sphinx.conf
</span><span class='line'>Sphinx 2.1.3-dev <span class="o">(</span>r4319<span class="o">)</span>
</span><span class='line'>Copyright <span class="o">(</span>c<span class="o">)</span> 2001-2013, Andrew Aksyonoff
</span><span class='line'>Copyright <span class="o">(</span>c<span class="o">)</span> 2008-2013, Sphinx Technologies Inc <span class="o">(</span>http://sphinxsearch.com<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>using config file <span class="s1">&#39;/Users/serj/Projects/gearup/config/development.sphinx.conf&#39;</span>...
</span><span class='line'>indexing index <span class="s1">&#39;service_core&#39;</span>...
</span><span class='line'>ERROR: <span class="nb">source</span> <span class="s1">&#39;service_core_0&#39;</span>: unknown <span class="nb">type</span> <span class="s1">&#39;pgsql&#39;</span>; skipping.
</span><span class='line'>ERROR: index <span class="s1">&#39;service_core&#39;</span>: failed to configure some of the sources, will not index.
</span><span class='line'>total 0 reads, 0.000 sec, 0.0 kb/call avg, 0.0 msec/call avg
</span><span class='line'>total 0 writes, 0.000 sec, 0.0 kb/call avg, 0.0 msec/call avg
</span></code></pre></td></tr></table></div></figure>


<p>To avoid them you should instal sphinx with mysql <strong>and</strong> postgres support:</p>

<figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install sphinx --mysql --pgsql
</span><span class='line'><span class="o">==</span>&gt; Downloading http://sphinxsearch.com/files/sphinx-2.1.3-release.tar.gz
</span><span class='line'>Already downloaded: /Library/Caches/Homebrew/sphinx-2.1.3.tar.gz
</span><span class='line'><span class="o">==</span>&gt; Downloading http://snowball.tartarus.org/dist/libstemmer_c.tgz
</span><span class='line'>Already downloaded: /Library/Caches/Homebrew/sphinx--stemmer-c.tgz
</span><span class='line'><span class="o">==</span>&gt; ./configure --prefix<span class="o">=</span>/usr/local/Cellar/sphinx/2.1.3 --localstatedir<span class="o">=</span>/usr/local/var --with-libstemmer --with-mysql --with-pgsql
</span><span class='line'><span class="o">==</span>&gt; make <span class="nv">install</span>
</span><span class='line'><span class="o">==</span>&gt; Caveats
</span><span class='line'>Sphinx has been compiled with libstemmer support.
</span><span class='line'>
</span><span class='line'>Sphinx depends on either MySQL or PostreSQL as a datasource.
</span><span class='line'>
</span><span class='line'>You can install these with Homebrew with:
</span><span class='line'>  brew install mysql
</span><span class='line'>    For MySQL server.
</span><span class='line'>
</span><span class='line'>  brew install mysql-connector-c
</span><span class='line'>    For MySQL client libraries only.
</span><span class='line'>
</span><span class='line'>  brew install postgresql
</span><span class='line'>    For PostgreSQL server.
</span><span class='line'>
</span><span class='line'>We don<span class="s1">&#39;t install these for you when you install this formula, as</span>
</span><span class='line'><span class="s1">we don&#39;</span>t know which datasource you intend to use.
</span><span class='line'><span class="o">==</span>&gt; Summary
</span><span class='line'>üç∫  /usr/local/Cellar/sphinx/2.1.3: 16 files, 18M, built in 17 seconds
</span></code></pre></td></tr></table></div></figure>


<p>After that you can install Thinking Sphinx:</p>

<figure class='code'><figcaption><span>Gemfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;mysql2&#39;</span><span class="p">,</span>          <span class="s1">&#39;0.3.13&#39;</span><span class="p">,</span> <span class="ss">:platform</span> <span class="o">=&gt;</span> <span class="ss">:ruby</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;thinking-sphinx&#39;</span><span class="p">,</span> <span class="s1">&#39;3.1.0&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And everything should be ok!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Integrate ActsAsTaggableOn With Jquery Token Input (With Rails 3)]]></title>
    <link href="http://bloginius.com/blog/2013/12/31/how-integrate-acts-as-taggable-on-with-jquery-token-input-with-rails-3/"/>
    <updated>2013-12-31T16:53:11+04:00</updated>
    <id>http://bloginius.com/blog/2013/12/31/how-integrate-acts-as-taggable-on-with-jquery-token-input-with-rails-3</id>
    <content type="html"><![CDATA[<p>Have you ever met problems with integrating the <a href="http://loopj.com/jquery-tokeninput/">Jquery Token Input</a> and the <a href="https://github.com/mbleigh/acts-as-taggable-on">acts_as_taggable_on</a>? Or are you gonna to implement these things together? Hold on! This article&rsquo;ll help you: I&rsquo;ll show you step by step how to do that with Rails 3.2.</p>

<!-- more -->


<h2>Acts as taggable on</h2>

<p>First of all, you should, of course, install acts_as_taggable_on. Add this in your gemfile:</p>

<figure class='code'><figcaption><span>Gemfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;acts-as-taggable-on&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And run these commands to install it:</p>

<figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle
</span><span class='line'><span class="nv">$ </span>rails g acts_as_taggable_on:migration
</span><span class='line'><span class="nv">$ </span>rake db:migrate
</span></code></pre></td></tr></table></div></figure>


<p>This will install gem, create and run it&rsquo;s migration to set your database properly. Next, you should attach tags to any existing model of your choice. In my case its the model Movie:</p>

<figure class='code'><figcaption><span>app/models/movie.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Movie</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">acts_as_taggable</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:tag_list</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Interesting thing is that the <code>acts_as_taggable</code> is just an alias for <code>acts_as_taggable_on :tags</code>. So you can really use any other name for your tags of your own choice. Also make sure that you added <code>tag_list</code> in <code>attr_accessible</code> section to be able to save tags.</p>

<p>Not it&rsquo;s time to create and then show tags. To do that you should add this simple code inside of your view with the form:</p>

<figure class='code'><figcaption><span>app/views/movies/_form.html.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;div class=&quot;field&quot;&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:tag_list</span><span class="p">,</span> <span class="s2">&quot;Your tags (separated by commas)&quot;</span> <span class="cp">%&gt;</span><span class="x">&lt;br/&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:tag_list</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To show tags you can use method <code>tag_list</code> which returns array of tags for a current object:</p>

<figure class='code'><figcaption><span>app/views/movies/show.html.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;p&gt;</span>
</span><span class='line'><span class="x">  &lt;b&gt;Name:&lt;/b&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="vi">@movie</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;br&gt;</span>
</span><span class='line'><span class="x">  &lt;b&gt;Tags:&lt;/b&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">raw</span> <span class="vi">@movie</span><span class="o">.</span><span class="n">tag_list</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That should be enough to be able manage your tags with acts_as_taggable_on. Now it&rsquo;s time to implement Jquery token input.</p>

<h2>Jquery token input</h2>

<p>To load <a href="https://github.com/loopj/jquery-tokeninput">jquery-token-input</a> in your app you should add it&rsquo;s js and css files in <code>vendor/assets</code> and after that include these files inside of your js and css manifests. For example:</p>

<figure class='code'><figcaption><span>assets/stylesheets/application.css </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">*=</span> <span class="nt">require</span> <span class="nt">token-input-mac</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>assets/javascripts/application.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//= require jquery.tokeninput</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please, note, that you css file may have another name (there are few themes available out the box) and it&rsquo;s really okay.</p>

<p>Now I would like to show to you my final coffee&rsquo;s code, which will do the job for my tags:</p>

<figure class='code'><figcaption><span>assets/javascripts/movies.js.coffee </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">jQuery</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s">&#39;#movie_tag_list_tokens&#39;</span><span class="p">).</span><span class="nx">tokenInput</span> <span class="s">&#39;/movies/tags.json&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">theme: </span><span class="s">&#39;mac&#39;</span>
</span><span class='line'>    <span class="nv">minChars: </span><span class="mi">2</span>
</span><span class='line'>    <span class="nv">allowCustomEntry: </span><span class="kc">true</span>
</span><span class='line'>    <span class="nv">preventDuplicates: </span><span class="kc">true</span>
</span><span class='line'>    <span class="nv">prePopulate: </span><span class="nx">$</span><span class="p">(</span><span class="s">&#39;#movie_tag_list_tokens&#39;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s">&#39;load&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code will grab and show new tags via ajax from the URL <code>/movies/tags.json</code>, basing on user input. But really, a tag can&rsquo;t consist of a single symbol, so I set minimum at 2 symbols to prohibit such bad behavior. Jquery token input will validate it for us.</p>

<p>To be able to create a new tag you should use <code>allowCustomEntry</code>. Also, a movie can already have tags, so i upload data from the div using data-load tag (you can easily implement it since Rails 3.1) and pass it to the <code>prePopulate</code> method. If you still not using Rails 3.1 then you can use instead of that gem <a href="https://github.com/gazay/gon">gon</a>, which I really love. And please, please upgrade Rails to the newer version!</p>

<p>Now it&rsquo;s time to add the method in controller, which will return all founded movies tags (so app will return data on <code>/movies/tags.json</code> call). First of all, add route with <code>tag</code> method:</p>

<figure class='code'><figcaption><span>config/routes.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:movies</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">collection</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="ss">:tags</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:tags</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I should add an actual method to the controller:</p>

<figure class='code'><figcaption><span>app/controllers/movies_controller.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">tags</span>
</span><span class='line'>  <span class="n">tags</span> <span class="o">=</span> <span class="no">Movie</span><span class="o">.</span><span class="n">all_tag_counts</span><span class="o">.</span><span class="n">by_tag_name</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:q</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">token_input_tags</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="n">tags</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code will do the job (it returns all movies tags). Note, that I use some tricks on the code above. I want to find tags of specific model (Movie), it makes sense, because I may have many tags for different models, and I want to separate model&rsquo;s tags from each other. That is why I use <code>all_tag_counts</code> which returns relation of tags (representing as array) for a <code>Movie</code>.</p>

<p>When the app gets all necessary tags via <code>all_tag_counts</code> then it should filter them to find tags which‚Äôll match user&rsquo;s input. For that purpose I use the scope <code>by_tag_name</code> which find data in received ActsAsTaggableOn‚Äôs relation. And finally, you should transform founded tags in the format, which Jquery token input will understand. If you would look up in the <a href="http://loopj.com/jquery-tokeninput/">docs</a> then you would see that js expects data in the very specific format:</p>

<figure class='code'><figcaption><span>Json tags </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span><span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="s2">&quot;856&quot;</span><span class="p">,</span><span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;House&quot;</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="s2">&quot;1035&quot;</span><span class="p">,</span><span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;Desperate Housewives&quot;</span><span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>But when <code>by_tag_name</code> scope has fired then I got such relation (as you remember):</p>

<figure class='code'><figcaption><span>by_tag_name output </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span> <span class="c1">#&lt;ActsAsTaggableOn::Tag id: 1, name: &quot;Piter Pan&quot;&gt;, #&lt;ActsAsTaggableOn::Tag id: 2, name: &quot;Superman&quot;&gt;, #&lt;ActsAsTaggableOn::Tag id: 3, name: &quot;Piter Parker&quot;&gt; ]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So I should transform my data for Jquery Token Input and method <code>token_input_tags</code> does it.</p>

<p>To implement <code>by_tag_name</code> and <code>token_input_tags</code> you should define the module in your <code>lib/</code> directory and after that include your module in the ActsAsTaggableOn, because the <code>all_tag_counts</code> returns ActsAsTaggableOn‚Äôs relation.</p>

<p>Here is my module:</p>

<figure class='code'><figcaption><span>lib/extended/tag_extend.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">TagExtend</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">scope</span> <span class="ss">:by_tag_name</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="nb">name</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="s2">&quot;name like ?&quot;</span><span class="p">,</span> <span class="s2">&quot;%</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">%&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">token_input_tags</span>
</span><span class='line'>        <span class="n">scoped</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">t</span><span class="o">|</span> <span class="p">{</span><span class="nb">id</span><span class="p">:</span> <span class="n">t</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="n">t</span><span class="o">.</span><span class="n">name</span> <span class="p">}}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I define my scope and method with some help of the ActiveSupport (thank you, guys!). You may be surprised that I put in the id name of a tag, but it&rsquo;s the only workaround which works for ActsAsTaggableOn (otherwise created tag will contain id instead of the name).</p>

<p>Now let&rsquo;s tell Rails to find my libs. In config/application.rb add:</p>

<figure class='code'><figcaption><span>config/application.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">+=</span> <span class="no">Dir</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">config</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/lib/**/&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally, lets include our module in ActsAsTaggableOn. Create in initializers file <code>acts_as_taggable_on.rb</code> and add in that file:</p>

<figure class='code'><figcaption><span>config/initializers/acts_as_taggable_on.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">ActsAsTaggableOn</span><span class="p">:</span><span class="ss">:Tag</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:include</span><span class="p">,</span> <span class="ss">ActsAsJqueryTokenRails3</span><span class="p">:</span><span class="ss">:TagExtend</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ActsAsTaggableOn is now having my scope and the defined method! Awesome!</p>

<p>But I didn&rsquo;t finish. When you create few tags, save your model and then try to edit your model then you expect to see your existing tags. So, lets implement it.</p>

<h2>Prepopulating tags</h2>

<p>As you remember, I has already defined such line of the code in my coffee&rsquo;s file:</p>

<figure class='code'><figcaption><span>assets/javascripts/movies.js.coffee </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">prePopulate: </span><span class="nx">$</span><span class="p">(</span><span class="s">&#39;#movie_tag_list_tokens&#39;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s">&#39;load&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To load actual movies tags I should add my data tag in the movie&rsquo;s edit form and then fill it with actual data. Here is updated form:</p>

<figure class='code'><figcaption><span>app/views/movies/_form.html.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;div class=&quot;field&quot;&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:tag_list_tokens</span><span class="p">,</span> <span class="s2">&quot;Your tags (separated by commas)&quot;</span> <span class="cp">%&gt;</span><span class="x">&lt;br/&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:tag_list_tokens</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span><span class="nb">load</span><span class="p">:</span> <span class="vi">@movie_tags</span><span class="p">}</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I didn&rsquo;t just add data but also I changed the name of the field. It&rsquo;s because when you create new tags then you get them in very specific format:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"old_tag1,old_tag2,'new_tag1','new_tag2'"</span></code></pre></td></tr></table></div></figure>


<p>As you can see, new tags are wrapped in single quotes. App shouldn&rsquo;t save these quotes, because user hasn&rsquo;t printed them. To do that I define a virtual attribute in my model and override setter to save actual tags without quotes:</p>

<figure class='code'><figcaption><span>app/models/movie.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Movie</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">acts_as_taggable</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:tag_list_tokens</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:tag_list_tokens</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tag_list_tokens</span><span class="o">=</span><span class="p">(</span><span class="n">tokens</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">tag_list</span> <span class="o">=</span> <span class="n">tokens</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s2">&quot;&#39;&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please notice, that now you can and should remove <code>tag_list</code> from attr_accessible.</p>

<p>All right, it&rsquo;s time to populate our movies tags! For that purpose in movies_controller i added before_filter to call a new method to collect existing tags:</p>

<figure class='code'><figcaption><span>app/controllers/movies_controller.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before_filter</span> <span class="ss">:find_tags</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:new</span><span class="p">,</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#...</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">find_tags</span>
</span><span class='line'>  <span class="vi">@movie_tags</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">].</span><span class="n">present?</span> <span class="p">?</span> <span class="no">Movie</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">token_input_tags</span> <span class="p">:</span> <span class="o">[]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now our app works, you can create new tags, add existing one, search them via ajax and even delete them. Thanks for your patience!</p>

<p>P.S. You can find working demo, it uses all these features in <a href="https://github.com/Loremaster/acts-as-jquery-token-rails3">my github&rsquo;s repo</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Upgrade Devise 2 to 3.2]]></title>
    <link href="http://bloginius.com/blog/2013/12/26/how-upgrade-devise-2-dot-x-to-3-dot-2-x/"/>
    <updated>2013-12-26T15:37:53+04:00</updated>
    <id>http://bloginius.com/blog/2013/12/26/how-upgrade-devise-2-dot-x-to-3-dot-2-x</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/plataformatec/devise">Devise</a> is a great gem! It really helps you, taking all authentication jobs away from you. However, upgrading Devise up to version 3.x can be a little bit tricky. In this post I&rsquo;ll show you how to do that.</p>

<p>First of all, update your gem via <code>bundle update</code> OR specify version in your Gemfile:</p>

<figure class='code'><figcaption><span>Gemfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;devise&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 3.2.2&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And run <code>bundle install</code>.</p>

<p>Since devise 3.1 platformatec <a href="http://blog.plataformatec.com.br/2013/08/devise-3-1-now-with-more-secure-defaults/">announced</a> few security improvements. One of them is <code>secret_key</code>. To add it open devise config and add:</p>

<figure class='code'><figcaption><span>config/initializers/devise.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># The secret key used by Devise. Devise uses this key to generate</span>
</span><span class='line'><span class="c1"># random tokens. Changing this key will render invalid all existing</span>
</span><span class='line'><span class="c1"># confirmation, reset password and unlock tokens in the database.</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">secret_key</span> <span class="o">=</span> <span class="s1">&#39;2710f15f11771d6692a3015d7e3dba2cb05539c1f72i6u345df5433hg535kj5x56v6er56if2566c63c2ad670d6859e536b40d87e6543b115609f0464bdd99502abbe241c4&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, you should use your own secret key, so change my example to be more secure.</p>

<p>If you have ever generated devise&rsquo;s views, then you should change it&rsquo;s mailers to use <code>@token</code> instead of <code>@resource.*_token</code>:</p>

<figure class='code'><figcaption><span>views/devise/mailer/confirmation_instructions.html.haml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'># ...
</span><span class='line'><span class="p">=</span> <span class="n">link_to</span> <span class="n">t</span><span class="p">(</span><span class="s1">&#39;devise.mailer.confirmation_instructions.submit&#39;</span><span class="p">),</span> <span class="n">confirmation_url</span><span class="p">(</span><span class="vi">@resource</span><span class="p">,</span> <span class="n">confirmation_token</span><span class="p">:</span> <span class="vi">@token</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>views/devise/mailer/reset_password_instructions.html.haml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'># ...
</span><span class='line'><span class="p">=</span> <span class="n">link_to</span> <span class="n">t</span><span class="p">(</span><span class="s1">&#39;devise.mailer.reset_password_instructions.reset_link&#39;</span><span class="p">),</span> <span class="n">edit_password_url</span><span class="p">(</span><span class="vi">@resource</span><span class="p">,</span> <span class="n">reset_password_token</span><span class="p">:</span> <span class="vi">@token</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>views/devise/mailer/unlock_instructions.html.haml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'># ...
</span><span class='line'><span class="p">=</span> <span class="n">link_to</span> <span class="n">t</span><span class="p">(</span><span class="s1">&#39;devise.mailer.unlock_instructions.unlock_link&#39;</span><span class="p">),</span> <span class="n">unlock_url</span><span class="p">(</span><span class="vi">@resource</span><span class="p">,</span> <span class="n">unlock_token</span><span class="p">:</span> <span class="vi">@token</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>After that everything should works. But take a look into your terminal: you may have deprecation errors, which you should fix!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Set Up Sublime Text 2 as Your Default Git Editor]]></title>
    <link href="http://bloginius.com/blog/2013/12/25/how-set-up-sublime-text-2-as-default-git-editor/"/>
    <updated>2013-12-25T12:42:58+04:00</updated>
    <id>http://bloginius.com/blog/2013/12/25/how-set-up-sublime-text-2-as-default-git-editor</id>
    <content type="html"><![CDATA[<p>If you love Sublime Text 2 as I do then you probably would like to change default git editor (which is Vim nowadays). I suppose that you have installed Sublime text.</p>

<p>First of all, you should install <code>subl</code> shortcut. To do that open your shell and print (if you already have <code>~/bin</code> directory, then just use the last line of my code):</p>

<figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~
</span><span class='line'><span class="nv">$ </span>mkdir bin
</span><span class='line'><span class="nv">$ </span>ln -s <span class="s2">&quot;/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl&quot;</span> ~/bin/subl
</span></code></pre></td></tr></table></div></figure>


<p>Now restart your shell and try that:</p>

<figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>subl -h
</span><span class='line'>Sublime Text 2 Build 2221
</span><span class='line'>
</span><span class='line'>Usage: subl <span class="o">[</span>arguments<span class="o">]</span> <span class="o">[</span>files<span class="o">]</span>         edit the given files
</span><span class='line'>   or: subl <span class="o">[</span>arguments<span class="o">]</span> <span class="o">[</span>directories<span class="o">]</span>   open the given directories
</span><span class='line'>   or: subl <span class="o">[</span>arguments<span class="o">]</span> -               edit stdin
</span><span class='line'>
</span><span class='line'>Arguments:
</span><span class='line'>  --project &lt;project&gt;: Load the given project
</span><span class='line'>  --command &lt;<span class="nb">command</span>&gt;: Run the given <span class="nb">command</span>
</span><span class='line'>  -n or --new-window:  Open a new window
</span><span class='line'>  -a or --add:         Add folders to the current window
</span><span class='line'>  -w or --wait:        Wait <span class="k">for </span>the files to be closed before returning
</span><span class='line'>  -b or --background:  Don<span class="err">&#39;</span>t activate the application
</span><span class='line'>  -s or --stay:        Keep the application activated after closing the file
</span><span class='line'>  -h or --help:        Show <span class="nb">help</span> <span class="o">(</span>this message<span class="o">)</span> and <span class="nb">exit</span>
</span><span class='line'>  -v or --version:     Show version and <span class="nb">exit</span>
</span><span class='line'>
</span><span class='line'>--wait is implied <span class="k">if </span>reading from stdin. Use --stay to not switch back
</span><span class='line'>to the terminal when a file is closed <span class="o">(</span>only relevant <span class="k">if </span>waiting <span class="k">for </span>a file<span class="o">)</span>.
</span><span class='line'>
</span><span class='line'>Filenames may be given a :line or :line:column suffix to open at a specific
</span><span class='line'>location.
</span></code></pre></td></tr></table></div></figure>


<p>If you have the same output, then everything works great. Otherwise you should add <code>~/bin</code> to your $PATH. To do that open your <code>~.bash_profile</code> and append these lines to the end of the file:</p>

<figure class='code'><figcaption><span>.bash_profile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:~/bin
</span><span class='line'><span class="nb">export </span>PATH
</span></code></pre></td></tr></table></div></figure>


<p>And I think that you should restart your shell again.</p>

<p>Finally, to set up sublime as default editor just print in your shell that:</p>

<figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git config --global core.editor <span class="s2">&quot;subl -n -w&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that is all!</p>
]]></content>
  </entry>
  
</feed>
